type Query {
  allCoreApplicationUsers(criteria: CoreApplicationUserCriteriaInput = {}, pagination: PaginationInput = {}, sort: CoreApplicationUserSortInput = {}): CoreApplicationUserConnection!
  searchCoreApplicationUsers(criteria: CoreApplicationUserCriteriaInput = {}, pagination: PaginationInput = {}, phrase: String!): CoreApplicationUserConnection!
  applicationUser(input: ModelIdInput!): CoreApplicationUser!
}

type Mutation {
  addCoreApplicationUser(input: AddCoreApplicationUserInput!): CoreApplicationUser!
  updateCoreApplicationUser(input: UpdateCoreApplicationUserInput!): CoreApplicationUser!
  removeCoreApplicationUser(input: ModelIdInput!): String
}

enum CoreApplicationUserSortField {
  updatedDate
  createdDate
}

input CoreApplicationUserSortInput {
  field: CoreApplicationUserSortField! = createdDate
  order: Int! = -1
}

type CoreApplicationUserConnection {
  totalCount: Int!
  edges: [CoreApplicationUserEdge]!
  pageInfo: PageInfo!
}

type CoreApplicationUserEdge {
  node: CoreApplicationUser!
  cursor: Cursor!
}

input CoreApplicationUserSortInput {
  field: CoreApplicationUserSortField! = createdDate
  order: Int! = -1
}

input UpdateCoreApplicationUserInput {
  id: String!
  payload: CoreApplicationUserPayloadInput!
}

input AddCoreApplicationUserInput {
  id: String!
  payload: AddCoreApplicationUserPayloadInput!
}

input AddCoreApplicationUserPayloadInput {
  email: String!
  familyName: String!
  givenName: String!
  roles: [CoreApplicationUserRole!]
}

input CoreApplicationUserPayloadInput {
  roles: [CoreApplicationUserRole]
}

input CoreApplicationUserCriteriaInput {
  application: String!
  roles: [CoreApplicationUserRole]
}
